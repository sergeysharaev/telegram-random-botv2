import telebot
import os
import json
import random
from telebot import types

TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TOKEN_HERE"
DATA_FILE = "data.json"
bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ===

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"ideas": [], "history": {}, "place_history": {}}, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# === –ö–Ω–æ–ø–∫–∏ ===

def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é", callback_data="get_idea"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", switch_inline_query_current_chat="/addidea "))
    markup.add(types.InlineKeyboardButton("üóí –í—Å–µ –∏–¥–µ–∏", callback_data="list_ideas"))
    return markup

@bot.message_handler(commands=["start", "help"])
def handle_help(message):
    bot.send_message(message.chat.id,
        "üëã –Ø –±–æ—Ç –¥–ª—è –∏–¥–µ–π –¥–æ—Å—É–≥–∞!

"
        "üìå /idea ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é
"
        "üìå /addidea —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é
"
        "üìå /addplace ID –ú–µ—Å—Ç–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –∫ –∏–¥–µ–µ
"
        "üìå /deleteidea ID ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–¥–µ—é
"
        "üìå /deleteplace ID –ú–µ—Å—Ç–æ# ‚Äî —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ –∏–∑ –∏–¥–µ–∏
"
        "üìå /listideas ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–¥–µ–∏",
        reply_markup=main_menu()
    )

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ===

@bot.message_handler(commands=["addidea"])
def add_idea(message):
    text = message.text[9:].strip()
    if not text:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–¥–µ–∏ –ø–æ—Å–ª–µ /addidea")
        return
    idea_id = max([i["id"] for i in data["ideas"]], default=0) + 1
    data["ideas"].append({"id": idea_id, "text": text, "places": []})
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {idea_id}")

@bot.message_handler(commands=["addplace"])
def add_place(message):
    try:
        parts = message.text.split(maxsplit=2)
        idea_id = int(parts[1])
        place = parts[2]
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addplace ID –ú–µ—Å—Ç–æ")
        return
    for idea in data["ideas"]:
        if idea["id"] == idea_id:
            idea["places"].append({"name": place})
            save_data(data)
            bot.send_message(message.chat.id, f"üí° –ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–¥–µ–µ {idea_id}")
            return
    bot.send_message(message.chat.id, f"‚ùå –ò–¥–µ—è —Å ID {idea_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# === –£–¥–∞–ª–µ–Ω–∏–µ ===

@bot.message_handler(commands=["deleteidea"])
def delete_idea(message):
    try:
        idea_id = int(message.text.split()[1])
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteidea ID")
        return
    before = len(data["ideas"])
    data["ideas"] = [i for i in data["ideas"] if i["id"] != idea_id]
    if len(data["ideas"]) < before:
        save_data(data)
        bot.send_message(message.chat.id, f"üóë –ò–¥–µ—è {idea_id} —É–¥–∞–ª–µ–Ω–∞.")
    else:
        bot.send_message(message.chat.id, f"‚ùå –ò–¥–µ—è —Å ID {idea_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.message_handler(commands=["deleteplace"])
def delete_place(message):
    try:
        parts = message.text.split(maxsplit=2)
        idea_id = int(parts[1])
        place_idx = int(parts[2]) - 1
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteplace ID –ù–æ–º–µ—Ä–ú–µ—Å—Ç–∞")
        return
    for idea in data["ideas"]:
        if idea["id"] == idea_id:
            if 0 <= place_idx < len(idea["places"]):
                removed = idea["places"].pop(place_idx)
                save_data(data)
                bot.send_message(message.chat.id, f"üóë –ú–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ: {removed['name']}")
                return
    bot.send_message(message.chat.id, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ.")

# === –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–¥–µ–π ===

@bot.message_handler(commands=["listideas"])
def list_ideas(message):
    if not data["ideas"]:
        bot.send_message(message.chat.id, "üì≠ –ò–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = []
    for idea in data["ideas"]:
        lines.append(f"{idea['id']}. {idea['text']}")
        for idx, place in enumerate(idea["places"], 1):
            lines.append(f"   üí° {idx}) {place['name']}")
    full = "\n".join(lines)
    if len(full) < 4000:
        bot.send_message(message.chat.id, full)
    else:
        # —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
        chunks = [full[i:i+4000] for i in range(0, len(full), 4000)]
        for part in chunks:
            bot.send_message(message.chat.id, part)

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–¥–µ–∏ ===

def send_random_idea(chat_id):
    chat_id_str = str(chat_id)
    history = data["history"].get(chat_id_str, [])
    available = [i for i in data["ideas"] if i["id"] not in history]

    if not available:
        bot.send_message(chat_id, "‚úÖ –í—Å–µ –∏–¥–µ–∏ —É–∂–µ –±—ã–ª–∏. –û–±–Ω—É–ª—è—é —Å–ø–∏—Å–æ–∫.")
        data["history"][chat_id_str] = []
        data["place_history"][chat_id_str] = {}
        save_data(data)
        return

    idea = random.choice(available)
    data["history"].setdefault(chat_id_str, []).append(idea["id"])
    response = f"üí° *{idea['text']}*"

    if idea["places"]:
        used_places = data["place_history"].setdefault(chat_id_str, {}).setdefault(str(idea["id"]), [])
        place_options = [p for idx, p in enumerate(idea["places"]) if idx not in used_places]
        if not place_options:
            used_places.clear()
            place_options = idea["places"]
        place = random.choice(place_options)
        place_index = idea["places"].index(place)
        used_places.append(place_index)
        response += f"\nüìç {place['name']}"

    save_data(data)
    bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=main_menu())

@bot.message_handler(commands=["idea"])
def handle_idea(message):
    send_random_idea(message.chat.id)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ===

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    if call.data == "get_idea":
        send_random_idea(call.message.chat.id)
    elif call.data == "list_ideas":
        list_ideas(call.message)

bot.polling()