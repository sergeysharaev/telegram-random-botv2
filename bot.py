import telebot
import os
import json
import random
from telebot import types

TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TOKEN_HERE"
DATA_FILE = "data.json"
bot = telebot.TeleBot(TOKEN)

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({
                "current_list": "default",
                "lists": {
                    "default": {
                        "name": "üåû –ò–¥–µ–∏ –¥–ª—è –¥–æ—Å—É–≥–∞ 2025 üî•",
                        "ideas": [],
                        "history": {},
                        "place_history": {}
                    }
                }
            }, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

def current():
    return data["lists"][data["current_list"]]

def main_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(types.InlineKeyboardButton("üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é", callback_data="get_idea"))
    markup.add(
        types.InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="addidea"),
        types.InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="addplace")
    )
    markup.add(
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é", callback_data="deleteidea"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="deleteplace")
    )
    markup.add(
        types.InlineKeyboardButton("üóí –í—Å–µ –∏–¥–µ–∏", callback_data="list_ideas"),
        types.InlineKeyboardButton("‚óÄÔ∏è –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="switchlist")
    )
    markup.add(
        types.InlineKeyboardButton("üìã –°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="new_list"),
        types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="delete_list")
    )
    return markup

@bot.message_handler(commands=["start", "help"])
def handle_help(message):
    bot.send_message(message.chat.id,
        f"üëã –Ø –±–æ—Ç –¥–ª—è –∏–¥–µ–π –¥–æ—Å—É–≥–∞!\n\n"
        f"üìå –ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫: *{data['lists'][data['current_list']]['name']}*\n\n"
        "üîπ /idea ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∏–¥–µ—é\n"
        "/addidea —Ç–µ–∫—Å—Ç ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é\n"
        "/addplace ID –ú–µ—Å—Ç–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ –∫ –∏–¥–µ–µ\n"
        "/deleteidea ID ‚Äî —É–¥–∞–ª–∏—Ç—å –∏–¥–µ—é\n"
        "/deleteplace ID –ù–æ–º–µ—Ä–ú–µ—Å—Ç–∞ ‚Äî —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ\n"
        "/listideas ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∏–¥–µ–∏",
        reply_markup=main_menu(), parse_mode="Markdown")

@bot.message_handler(commands=["addidea"])
def add_idea(message):
    text = message.text[9:].strip()
    if not text:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –∏–¥–µ–∏ –ø–æ—Å–ª–µ /addidea")
        return
    ideas = current()["ideas"]
    ideas.append({"id": len(ideas) + 1, "text": text, "places": []})
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(ideas)}")

@bot.message_handler(commands=["addplace"])
def add_place(message):
    try:
        parts = message.text.split(maxsplit=2)
        idea_id = int(parts[1]) - 1
        place = parts[2]
        ideas = current()["ideas"]
        if 0 <= idea_id < len(ideas):
            ideas[idea_id]["places"].append({"name": place})
            save_data(data)
            bot.send_message(message.chat.id, f"üìç –ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–¥–µ–µ {idea_id + 1}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ò–¥–µ—è —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addplace ID –ú–µ—Å—Ç–æ")

@bot.message_handler(commands=["deleteidea"])
def delete_idea(message):
    try:
        idea_id = int(message.text.split()[1])
        ideas = current()["ideas"]
        if 1 <= idea_id <= len(ideas):
            del ideas[idea_id - 1]
            for i, idea in enumerate(ideas, 1):
                idea["id"] = i
            current()["history"] = {}
            current()["place_history"] = {}
            save_data(data)
            bot.send_message(message.chat.id, f"üóë –ò–¥–µ—è {idea_id} —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            bot.send_message(message.chat.id, f"‚ùå –ò–¥–µ—è {idea_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteidea ID")

@bot.message_handler(commands=["deleteplace"])
def delete_place(message):
    try:
        parts = message.text.split(maxsplit=2)
        idea_id = int(parts[1]) - 1
        place_idx = int(parts[2]) - 1
        ideas = current()["ideas"]
        if 0 <= idea_id < len(ideas) and 0 <= place_idx < len(ideas[idea_id]["places"]):
            removed = ideas[idea_id]["places"].pop(place_idx)
            save_data(data)
            bot.send_message(message.chat.id, f"üóë –ú–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–æ: {removed['name']}")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∏–¥–µ–∏ –∏–ª–∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞.")
    except:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteplace ID –ù–æ–º–µ—Ä–ú–µ—Å—Ç–∞")

@bot.message_handler(commands=["listideas"])
def list_ideas(message):
    ideas = current()["ideas"]
    if not ideas:
        bot.send_message(message.chat.id, "üì≠ –ò–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    lines = []
    for idea in ideas:
        lines.append(f"{idea['id']}. {idea['text']}")
        for idx, place in enumerate(idea["places"], 1):
            lines.append(f"   üìç {idx}) {place['name']}")
    full = "\n".join(lines)
    chunks = [full[i:i+4000] for i in range(0, len(full), 4000)]
    for part in chunks:
        bot.send_message(message.chat.id, part)

def send_random_idea(chat_id):
    c = current()
    chat_id_str = str(chat_id)
    history = c["history"].get(chat_id_str, [])
    available = [i for i in c["ideas"] if i["id"] not in history]

    if not available:
        bot.send_message(chat_id, "‚úÖ –í—Å–µ –∏–¥–µ–∏ —É–∂–µ –±—ã–ª–∏. –û–±–Ω—É–ª—è—é —Å–ø–∏—Å–æ–∫.")
        c["history"][chat_id_str] = []
        c["place_history"][chat_id_str] = {}
        save_data(data)
        return

    idea = random.choice(available)
    c["history"].setdefault(chat_id_str, []).append(idea["id"])
    response = f"üìç *{idea['text']}*"

    if idea["places"]:
        used_places = c["place_history"].setdefault(chat_id_str, {}).setdefault(str(idea["id"]), [])
        place_options = [p for idx, p in enumerate(idea["places"]) if idx not in used_places]
        if not place_options:
            used_places.clear()
            place_options = idea["places"]
        place = random.choice(place_options)
        place_index = idea["places"].index(place)
        used_places.append(place_index)
        response += f"\nüìç {place['name']}"

    save_data(data)
    bot.send_message(chat_id, response, parse_mode="Markdown", reply_markup=main_menu())

@bot.message_handler(commands=["idea"])
def handle_idea(message):
    send_random_idea(message.chat.id)

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    if call.data == "get_idea":
        send_random_idea(call.message.chat.id)
    elif call.data == "list_ideas":
        list_ideas(call.message)
    elif call.data == "switchlist":
        markup = types.InlineKeyboardMarkup()
        for key, val in data["lists"].items():
            text = "‚úÖ " + val["name"] if key == data["current_list"] else val["name"]
            markup.add(types.InlineKeyboardButton(text, callback_data=f"use_{key}"))
        bot.send_message(call.message.chat.id, "üîÑ –í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫:", reply_markup=markup)
    elif call.data == "new_list":
        bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
        bot.register_next_step_handler(call.message, handle_new_list)
    elif call.data == "delete_list":
        if data["current_list"] == "default":
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        else:
            del data["lists"][data["current_list"]]
            data["current_list"] = "default"
            save_data(data)
            bot.send_message(call.message.chat.id, "üóë –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω. –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ default.")
    elif call.data.startswith("use_"):
        list_key = call.data[4:]
        if list_key in data["lists"]:
            data["current_list"] = list_key
            save_data(data)
            bot.send_message(call.message.chat.id, f"‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ —Å–ø–∏—Å–æ–∫: {data['lists'][list_key]['name']}")

def handle_new_list(message):
    key = message.text.lower().replace(" ", "_")
    if key in data["lists"]:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ —Å —Ç–∞–∫–∏–º –∫–ª—é—á–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    data["lists"][key] = {
        "name": message.text,
        "ideas": [],
        "history": {},
        "place_history": {}
    }
    data["current_list"] = key
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω: {message.text}")

bot.polling()
