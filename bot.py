# -*- coding: utf-8 -*-
import telebot
import os
import json
import random
from telebot import types

TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TOKEN_HERE"
DATA_FILE = "data.json"
bot = telebot.TeleBot(TOKEN, parse_mode="Markdown")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º JSON

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"chats": {}}, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞

def init_chat(chat_id):
    str_id = str(chat_id)
    if str_id not in data["chats"]:
        data["chats"][str_id] = {
            "lists": {},
            "current_list": None,
            "state": {}
        }

# –ú–µ–Ω—é

def main_menu():
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é", callback_data="get_idea")
    )
    markup.add(
        types.InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="addidea"),
        types.InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="addplace")
    )
    markup.add(
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é", callback_data="deleteidea"),
        types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="deleteplace")
    )
    markup.add(
        types.InlineKeyboardButton("üóí –í—Å–µ –∏–¥–µ–∏", callback_data="listideas"),
        types.InlineKeyboardButton("‚óÄÔ∏è –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="switchlist")
    )
    return markup

# –ö–æ–º–∞–Ω–¥—ã
@bot.message_handler(commands=["start"])
def start(message):
    chat_id = str(message.chat.id)
    init_chat(chat_id)
    bot.send_message(message.chat.id, "üëã –Ø –±–æ—Ç –¥–ª—è –∏–¥–µ–π –¥–æ—Å—É–≥–∞!", reply_markup=main_menu())

# –ö–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def handle_buttons(call):
    chat_id = str(call.message.chat.id)
    user_id = str(call.from_user.id)
    init_chat(chat_id)
    chat = data["chats"][chat_id]
    state = chat["state"]

    if call.data == "get_idea":
        show_random_idea(call.message)
        return

    if call.data == "listideas":
        send_idea_list(call.message)
        return

    if call.data == "addidea":
        state[user_id] = {"mode": "addidea"}
        bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∏–¥–µ—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=cancel_markup())
        return

    if call.data == "addplace":
        state[user_id] = {"mode": "addplace"}
        bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏ –º–µ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `3 –ü–∞—Ä–∫ –°–∫–∞–∑–∫–∞`) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=cancel_markup())
        return

    if call.data == "deleteidea":
        state[user_id] = {"mode": "deleteidea"}
        bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–¥–µ–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=cancel_markup())
        return

    if call.data == "deleteplace":
        state[user_id] = {"mode": "deleteplace"}
        bot.edit_message_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ ID –∏–¥–µ–∏ –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `2 1`) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ‚ùå –û—Ç–º–µ–Ω–∞.",
                              chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=cancel_markup())
        return

    if call.data == "switchlist":
        bot.send_message(call.message.chat.id, "üìã –°–ø–∏—Å–æ–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç (—ç—Ç–∞ —á–∞—Å—Ç—å –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).", reply_markup=main_menu())

    if call.data == "cancel":
        state.pop(user_id, None)
        bot.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", chat_id=call.message.chat.id,
                              message_id=call.message.message_id,
                              reply_markup=main_menu())
        save_data()
        return

# –û—Ç–º–µ–Ω–∞

def cancel_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"))
    return markup

# –°–ø–∏—Å–æ–∫ –∏–¥–µ–π

def send_idea_list(message):
    chat_id = str(message.chat.id)
    chat = data["chats"][chat_id]
    current_key = chat["current_list"]
    if not current_key or current_key not in chat["lists"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        return
    idea_list = chat["lists"][current_key]
   lines = [f"{idea_list['name']}"]
    for idea in idea_list["ideas"]:
        lines.append(f"*{idea['id']}. {idea['text']}*
")
        for place in idea["places"]:
            lines.append(f"üìç{place['name']}")
        lines.append("")
    text = "
".join(lines).strip()
    for chunk in [text[i:i+4000] for i in range(0, len(text), 4000)]:
        bot.send_message(message.chat.id, chunk)

# –ò–¥–µ—è —Å–ª—É—á–∞–π–Ω–∞—è

def show_random_idea(message):
    chat_id = str(message.chat.id)
    chat = data["chats"][chat_id]
    current_key = chat["current_list"]
    if not current_key or current_key not in chat["lists"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        return
    idea_list = chat["lists"][current_key]
    if not idea_list["ideas"]:
        bot.send_message(message.chat.id, "üì≠ –ò–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    idea = random.choice(idea_list["ideas"])
    response = f"üí° *{idea['text']}*"
    if idea["places"]:
        response += f"
üìç {random.choice(idea['places'])['name']}"
    bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(func=lambda msg: True)
def handle_text(message):
    chat_id = str(message.chat.id)
    user_id = str(message.from_user.id)
    init_chat(chat_id)
    chat = data["chats"][chat_id]
    state = chat["state"].get(user_id)
    if not state:
        return
    mode = state.get("mode")
    current_key = chat["current_list"]
    if not current_key or current_key not in chat["lists"]:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π.")
        chat["state"].pop(user_id, None)
        save_data()
        return
    lst = chat["lists"][current_key]

    if mode == "addidea":
        new_id = len(lst["ideas"]) + 1
        lst["ideas"].append({"id": new_id, "text": message.text.strip(), "places": []})
        bot.send_message(message.chat.id, f"‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {new_id}.", reply_markup=main_menu())

    elif mode == "addplace":
        try:
            parts = message.text.strip().split(maxsplit=1)
            idea_id = int(parts[0]) - 1
            place = parts[1]
            lst["ideas"][idea_id]["places"].append({"name": place})
            bot.send_message(message.chat.id, f"üìç –ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–¥–µ–µ {idea_id+1}.", reply_markup=main_menu())
        except:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: ID –ú–µ—Å—Ç–æ", reply_markup=main_menu())

    elif mode == "deleteidea":
        try:
            idx = int(message.text.strip()) - 1
            lst["ideas"].pop(idx)
            for i, idea in enumerate(lst["ideas"], 1):
                idea["id"] = i
            bot.send_message(message.chat.id, f"üóë –ò–¥–µ—è —É–¥–∞–ª–µ–Ω–∞.", reply_markup=main_menu())
        except:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∏–¥–µ–∏.", reply_markup=main_menu())

    elif mode == "deleteplace":
        try:
            parts = message.text.strip().split()
            idx = int(parts[0]) - 1
            place_idx = int(parts[1]) - 1
            removed = lst["ideas"][idx]["places"].pop(place_idx)
            bot.send_message(message.chat.id, f"üóë –£–¥–∞–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {removed['name']}", reply_markup=main_menu())
        except:
            bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞.", reply_markup=main_menu())

    chat["state"].pop(user_id, None)
    save_data()

# –ó–∞–ø—É—Å–∫
bot.infinity_polling()
