import os
import json
import random
import telebot
from telebot import types

TOKEN = os.getenv("BOT_TOKEN") or "YOUR_TOKEN_HERE"
DATA_FILE = "data.json"
bot = telebot.TeleBot(TOKEN, parse_mode='Markdown')

def load_data():
    if not os.path.exists(DATA_FILE):
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump({"current_list": "default", "lists": {"default": {
                "name": "üåû –ò–¥–µ–∏ –¥–ª—è –¥–æ—Å—É–≥–∞ 2025 üî•",
                "ideas": [], "history": {}, "place_history": {}
            }}}, f, ensure_ascii=False, indent=2)
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

def get_current_list():
    return data["lists"][data["current_list"]]

def main_menu():
    markup = types.InlineKeyboardMarkup()
    markup.row(types.InlineKeyboardButton("üé≤ –ü–æ–ª—É—á–∏—Ç—å –∏–¥–µ—é", callback_data="get_idea"))
    markup.row(types.InlineKeyboardButton("üí° –î–æ–±–∞–≤–∏—Ç—å –∏–¥–µ—é", callback_data="addidea_hint"))
    markup.row(types.InlineKeyboardButton("üìç –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="addplace_hint"))
    markup.row(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∏–¥–µ—é", callback_data="deleteidea_hint"))
    markup.row(types.InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ", callback_data="deleteplace_hint"))
    markup.row(types.InlineKeyboardButton("üìã –°–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="switch_list"))
    markup.row(types.InlineKeyboardButton("üóí –í—Å–µ –∏–¥–µ–∏", callback_data="list_ideas"))
    return markup

@bot.message_handler(commands=["start", "help"])
def handle_start(message):
    bot.send_message(message.chat.id, "üëã –Ø –±–æ—Ç –¥–ª—è –∏–¥–µ–π –¥–æ—Å—É–≥–∞!", reply_markup=main_menu())

@bot.message_handler(commands=["addidea"])
def add_idea(message):
    text = message.text[9:].strip()
    if not text:
        bot.reply_to(message, "‚ö†Ô∏è –ù–∞–ø–∏—à–∏ –∏–¥–µ—é –ø–æ—Å–ª–µ /addidea")
        return
    clist = get_current_list()
    if any(i["text"].strip().lower() == text.lower() for i in clist["ideas"]):
        bot.reply_to(message, "‚ö†Ô∏è –¢–∞–∫–∞—è –∏–¥–µ—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return
    clist["ideas"].append({"id": len(clist["ideas"]) + 1, "text": text, "places": []})
    save_data(data)
    bot.reply_to(message, f"‚úÖ –ò–¥–µ—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º {len(clist['ideas'])}")

@bot.message_handler(commands=["addplace"])
def add_place(message):
    try:
        _, idea_id, place = message.text.split(maxsplit=2)
        idea = get_current_list()["ideas"][int(idea_id) - 1]
        if any(p["name"].strip().lower() == place.lower() for p in idea["places"]):
            bot.reply_to(message, "‚ö†Ô∏è –≠—Ç–æ –º–µ—Å—Ç–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–¥–µ–µ.")
            return
        idea["places"].append({"name": place})
        save_data(data)
        bot.reply_to(message, f"üìç –ú–µ—Å—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∏–¥–µ–µ {idea_id}")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /addplace ID –ú–µ—Å—Ç–æ")

@bot.message_handler(commands=["deleteidea"])
def delete_idea(message):
    try:
        idea_id = int(message.text.split()[1])
        clist = get_current_list()
        del clist["ideas"][idea_id - 1]
        for i, idea in enumerate(clist["ideas"], 1):
            idea["id"] = i
        clist["history"] = {}
        clist["place_history"] = {}
        save_data(data)
        bot.reply_to(message, f"üóë –ò–¥–µ—è {idea_id} —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–æ—Ä—è–¥–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteidea ID")

@bot.message_handler(commands=["deleteplace"])
def delete_place(message):
    try:
        _, idea_id, place_idx = message.text.split()
        idea = get_current_list()["ideas"][int(idea_id) - 1]
        removed = idea["places"].pop(int(place_idx) - 1)
        save_data(data)
        bot.reply_to(message, f"üóë –£–¥–∞–ª–µ–Ω–æ –º–µ—Å—Ç–æ: {removed['name']}")
    except:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /deleteplace ID –ù–æ–º–µ—Ä–ú–µ—Å—Ç–∞")

@bot.message_handler(commands=["listideas"])
def list_ideas(message):
    clist = get_current_list()
    if not clist["ideas"]:
        bot.send_message(message.chat.id, "üì≠ –ò–¥–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    text = f"*{data['lists'][data['current_list']]['name']}*\n\n"
    for idea in clist["ideas"]:
        text += f"{idea['id']}. {idea['text']}\n"
        for idx, place in enumerate(idea["places"], 1):
            text += f"   üìç {idx}) {place['name']}\n"
    for chunk in [text[i:i+4000] for i in range(0, len(text), 4000)]:
        bot.send_message(message.chat.id, chunk)

@bot.message_handler(commands=["idea"])
def send_random(message):
    send_random_idea(message.chat.id)

def send_random_idea(chat_id):
    cid = str(chat_id)
    clist = get_current_list()
    history = clist["history"].get(cid, [])
    available = [i for i in clist["ideas"] if i["id"] not in history]

    if not available:
        clist["history"][cid] = []
        clist["place_history"][cid] = {}
        save_data(data)
        bot.send_message(chat_id, "‚úÖ –í—Å–µ –∏–¥–µ–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –ù–∞—á–∏–Ω–∞—é –∑–∞–Ω–æ–≤–æ.")
        return

    idea = random.choice(available)
    clist["history"].setdefault(cid, []).append(idea["id"])
    result = f"üí° *{idea['text']}*"

    if idea["places"]:
        p_hist = clist["place_history"].setdefault(cid, {}).setdefault(str(idea["id"]), [])
        options = [p for i, p in enumerate(idea["places"]) if i not in p_hist]
        if not options:
            p_hist.clear()
            options = idea["places"]
        place = random.choice(options)
        p_hist.append(idea["places"].index(place))
        result += f"\nüìç {place['name']}"

    save_data(data)
    bot.send_message(chat_id, result, reply_markup=main_menu())

def list_selector():
    markup = types.InlineKeyboardMarkup()
    for key, val in data["lists"].items():
        text = f"‚úÖ {val['name']}" if key == data["current_list"] else val["name"]
        markup.row(types.InlineKeyboardButton(text, callback_data=f"setlist_{key}"))
    markup.row(types.InlineKeyboardButton("‚ûï –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫", callback_data="new_list"))
    markup.row(types.InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="delete_list"))
    return markup

@bot.callback_query_handler(func=lambda c: True)
def handle_callback(call):
    if call.data == "get_idea": send_random_idea(call.message.chat.id)
    elif call.data == "list_ideas": list_ideas(call.message)
    elif call.data == "addidea_hint": bot.send_message(call.message.chat.id, "/addidea –í–∞—à–∞ –∏–¥–µ—è")
    elif call.data == "addplace_hint": bot.send_message(call.message.chat.id, "/addplace ID –ú–µ—Å—Ç–æ")
    elif call.data == "deleteidea_hint": bot.send_message(call.message.chat.id, "/deleteidea ID")
    elif call.data == "deleteplace_hint": bot.send_message(call.message.chat.id, "/deleteplace ID –ù–æ–º–µ—Ä")
    elif call.data == "switch_list": bot.send_message(call.message.chat.id, "üìã –í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫:", reply_markup=list_selector())
    elif call.data.startswith("setlist_"):
        data["current_list"] = call.data.split("_", 1)[1]
        save_data(data)
        bot.send_message(call.message.chat.id, "‚úÖ –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.", reply_markup=main_menu())
    elif call.data == "new_list":
        msg = bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞:")
        bot.register_next_step_handler(msg, create_new_list)
    elif call.data == "delete_list":
        if data["current_list"] == "default":
            bot.send_message(call.message.chat.id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
        else:
            del data["lists"][data["current_list"]]
            data["current_list"] = "default"
            save_data(data)
            bot.send_message(call.message.chat.id, "üóë –°–ø–∏—Å–æ–∫ —É–¥–∞–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—Ç –∫ 'default'.", reply_markup=main_menu())

def create_new_list(message):
    name = message.text.strip()
    key = name.lower().replace(" ", "_")[:32]
    n = 1
    base = key
    while key in data["lists"]:
        key = f"{base}_{n}"
        n += 1
    data["lists"][key] = {"name": name, "ideas": [], "history": {}, "place_history": {}}
    data["current_list"] = key
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: *{name}*", reply_markup=main_menu())

bot.infinity_polling()
